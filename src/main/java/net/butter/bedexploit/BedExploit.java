package net.butter.bedexploit;

import net.butter.bedexploit.events.BedEnterEvent;
import org.bukkit.*;
import org.bukkit.block.Block;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.*;
import org.bukkit.plugin.Plugin;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.block.BlockState;
import org.bukkit.block.data.type.Bed;

import java.util.HashMap;
import java.util.Map;
import java.util.Random;

public class BedExploit extends JavaPlugin implements Listener {
    private Map<String, Location> respawnLocations;
    private Map<String, Boolean> allowBedSpawn;

    @Override
    public void onEnable() {
        getServer().getPluginManager().registerEvents(this, this);
        getServer().getPluginManager().registerEvents(new BedEnterEvent(), this);
        respawnLocations = new HashMap<>();
        allowBedSpawn = new HashMap<>();
    }

    @Override
    public void onDisable() {
        // Loop through all online players
        for (Player player : Bukkit.getOnlinePlayers()) {
            String playerName = player.getName();

            if (respawnLocations.containsKey(playerName)) {
                player.setBedSpawnLocation(respawnLocations.get(playerName), true);
            }
        }
    }


    @EventHandler
    public void onPlayerJoin(PlayerJoinEvent event) {
        Player player = event.getPlayer();
        String playerName = player.getName();
        if (!respawnLocations.containsKey(playerName)) {
            Location bed = player.getBedSpawnLocation();
            if (bed != null) {
                respawnLocations.put(playerName, bed);
            }
            allowBedSpawn.put(playerName, false);
        }
    }

    @EventHandler
    public void onPlayerBedEnter(PlayerBedEnterEvent event) {
        Player player = event.getPlayer();
        String playerName = player.getName();
        if (event.getBedEnterResult() == PlayerBedEnterEvent.BedEnterResult.OK) {
            respawnLocations.put(playerName, event.getBed().getLocation());
        }
    }

    @EventHandler
    public void onPlayerRespawn(PlayerRespawnEvent event) {
        Player player = event.getPlayer();
        String playerName = player.getName();
        if (respawnLocations.containsKey(playerName)) {
            Location respawnLocation = respawnLocations.get(playerName);
            Block bedBlock = respawnLocation.getBlock();
            BlockState bedBlockState = bedBlock.getState();
            if (bedBlockState.getBlockData() instanceof Bed) {
                event.setRespawnLocation(respawnLocation);
            } else {
                Location randomLocation = RandomLocationGenerator.generateRandomLocation(player.getWorld());
                //Location spawnLocation = player.getWorld().getSpawnLocation();
                event.setRespawnLocation(randomLocation);
                allowBedSpawn.put(playerName, true);
            }
        }
    }

    public class RandomLocationGenerator {
        private static final Random random = new Random();

        public static Location generateRandomLocation(World world) {
            int x = random.nextInt(6000) - 3000; // Random x-coordinate in range [-3000, 3000]
            int z = random.nextInt(6000) - 3000; // Random z-coordinate in range [-3000, 3000]
            int y = world.getHighestBlockYAt(x, z);
            return new Location(world, x, y, z);
        }
    }

    @EventHandler
    public void onPlayerQuit(PlayerQuitEvent event) {
        Player player = event.getPlayer();
        String playerName = player.getName();
        if (respawnLocations.containsKey(playerName)) {
            player.setBedSpawnLocation(respawnLocations.get(playerName), true);
            respawnLocations.remove(playerName);
        }
    }

    @EventHandler
    public void onPlayerKick(PlayerKickEvent event) {
        Player player = event.getPlayer();
        String playerName = player.getName();
        if (respawnLocations.containsKey(playerName)) {
            player.setBedSpawnLocation(respawnLocations.get(playerName), true);
            respawnLocations.remove(playerName);
        }
    }

    @EventHandler
    public void onPlayerMove(PlayerMoveEvent event) {
        Player player = event.getPlayer();
        String playerName = player.getName();
        if (respawnLocations.containsKey(playerName) && allowBedSpawn.getOrDefault(playerName, false)) {
            player.setBedSpawnLocation(respawnLocations.get(playerName), true);
            allowBedSpawn.put(playerName, false); // Set the value to false after using it
        }
    }

}
